par(mfrow=c(1,1))
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
plot.enet(mod_lasso$finalModel,  use.color = TRUE)
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
plot.enet(mod_lasso$finalModel,  use.color = TRUE)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate) # For year() function below
dat = read.csv("~/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
?bats
?bats()
?forecast
mod_bats <- bats ()
dim(gaData)
dim(dat)
head (dat)
mod_bat <- bats(dat$date)
library(forecast)
mod_bat <- bats(dat$date)
mod_bat <- bats(training$date)
mod_bat
plot(mod_bat)
mod_bat <- bats(training$visitsTumblr)
plot(mod_bat)
fcast <- forecast ( mod_bat , level = 95 , h = dim(testing)[1])
fcast$lower
fcast$upper
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
install.packages("e1071 ")
libraty(e1071)
library(e1071)
?e1071
model <- svm (\CompressiveStrength ~ . , data = training)
model <- svm (CompressiveStrength ~ . , data = training)
model
?svm
predict(model , testing)
predictions(model , testing)
x <- predict ( model , testing)
accurancy (x , testing$CompressiveStrength)
accuracy (x , testing$CompressiveStrength)
getwd()
dat = read.csv("~/pml-testing.csv")
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
x<-1
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
```{r, echo=FALSE}
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
dim(dat)
dat$classe
dat$classef
dat = read.csv("~/pml-testing.csv")
names(dat)
names(dat$classe)
urlTrain <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
train <- read.csv(csvTrain, na.strings=c("NA","#DIV/0!",""))
csvTrain <- "pml-training.csv"
train <- read.csv(csvTrain, na.strings=c("NA","#DIV/0!",""))
download.file(urlTrain,csvTrain)
train <- read.csv(csvTrain, na.strings=c("NA","#DIV/0!",""))
download.file(urlTrain,csvTrain)
train <- read.csv(csvTrain, na.strings=c("NA","#DIV/0!",""))
help(na.strings)
trainingURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile <- "pm-training.csv"
if (file.exists(trainingFile)){
training <- read.csv(trainingFile , na.strings = c("NA" , "") )
} else {
download.file(trainingURL, trainingFile)
training <- read.csv(trainingFile , na.strings = c("NA" , ""))
}
testingFile <- "pm-testing.csv"
if (file.exists(testingFile)){
testing <- read.csv(testingFile , na.strings = c("NA" , "") )
} else {
download.file(testingURL, testingFile)
testing <- read.csv(testingFile , na.strings = c("NA" , ""))
}
dim(training)
training$classe
head(training)
head(dat)
all.equal(colnames(test)[1:length(colnames(test))-1], colnames(train)[1:length(colnames(train))-1])
all.equal(colnames(testing)[1:length(colnames(testing))-1], colnames(training)[1:length(colnames(training))-1])
help ("all.equal")
summary(training)
help(nearZeroVar)
nearzero <- nearZeroVar(training, saveMetrics = TRUE)
head(nearzero)
training <- training[, !nearzero$nzv]
head(training)
dim(training)
dim(testing)
colnames(training)
varRemove <- sapply(colnames(training),
function(x) if(sum(is.na(training[, x])) > 0.50*nrow(training)){
return(TRUE)
}else{
return(FALSE)}
)
varRemove
names(varRemove)
training <- training[, !varRemove]
names(training)
Hcorr <- caret::findCorrelation(cor(train[, -53]), cutoff=0.8)
names(train)[Hcorr]
Hcorr <- caret::findCorrelation(cor(train[, -59]), cutoff=0.8)
names(train)[Hcorr]
Hcorr <- caret::findCorrelation(cor(training[, -59]), cutoff=0.8)
names(train)[Hcorr]
cor(training[, -59])
names(training)
cor(training[, -59])
help("cor")
training[, -59]
cor(training[, -59])
cor(training[, -59],use="pairwise.complete.obs")
head(training[, -59]))
head(training[, -59])
training <- training[,-(1:6)]
cor(training[, -53],use="pairwise.complete.obs")
high_cor <- cor(training [,-59])
cor(training[, -53],use="pairwise.complete.obs")
q
dim(training)
cor(training[, -53])
cor(training[, -53],cutoff = 0.8)
help(findCorrelation)
high_cor <- findCorrelation(cor(training), cutoff=0.9)
training[,-53]
training
training[,-53]
names(training[,-53])
names(training[,-52])
names(training[,-1])
names(training)
high_cor <- findCorrelation(training [,-53] , cutoff = 0.9)
high_cor <- caret::findCorrelation(training [,-53] , cutoff = 0.9)
roundCov <- round(kaufcov, 9)
head(training)
roundCov <- round(training, 9)
roundCov <- round(training[,-53], 9)
head(roundCov)
names(roundCov)
high_cor <- findCorrelation(training [,-53] , cutoff = 0.9)
high_cor <- findCorrelation(roundCov, cutoff = 0.9)
high_cor <- findCorrelation(roundCov, cutoff = 0.5
)
high_cor <- findCorrelation(roundCov, cutoff = 0.5
)
head(training)
high_cor <- findCorrelation(training [,-53] , cutoff = 0.9)
dim(training[,-53])
high_cor <- findCorrelation(cor(training [,-53]) , cutoff = 0.9)
hight_cor
high_cor
names(training[high_cor])
high_cor <- findCorrelation(cor(training [,-53]) , cutoff = 0.85)
names(training[high_cor])
trainingControl <- trainControl (methos = "cv" ,preProcOptions = "pca" ,  verboseIter = FALSE , allowParalel = TRUE )
trainingControl <- trainControl (methos = "cv" ,preProcOptions = "pca" ,  verboseIter = FALSE , allowParallel = TRUE )
trainingControl <- trainControl (methods = "cv" ,preProcOptions = "pca" ,  verboseIter = FALSE , allowParallel = TRUE )
trainingControl <- trainControl (method = "cv" ,preProcOptions = "pca" ,  verboseIter = FALSE , allowParallel = TRUE )
trainingControl <- trainControl (method= "cv" ,number = 5 , preProcOptions = "pca" ,  verboseIter = FALSE , allowParallel = TRUE )
library(caTools)
plot(training$classe~. , data = training)
rf <- train(classe ~ ., data = training, method = "rf", trControl= trainingControl)
predictionsRF <- predict(rf , testing , type = "class")
confusionMatrix(rf , testin)
testing
head(testing)
dim(testing)
testing <- read.csv(testingFile , na.strings = c("NA" , "") )
dim(testing)
training1 <- read.csv(trainingFile , na.strings = c("NA" , "") )
dim(training1)
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
trainingDat <- training[inTrain, ]
testingDat <- training[-inTrain, ]
dim(trainingDat)
dim(testingDat)
trainingFile <- "pm-training.csv"
if (file.exists(trainingFile)){
training <- read.csv(trainingFile , na.strings = c("NA" , "") )
} else {
download.file(trainingURL, trainingFile)
training <- read.csv(trainingFile , na.strings = c("NA" , ""))
}
testingFile <- "pm-testing.csv"
if (file.exists(testingFile)){
test <- read.csv(testingFile , na.strings = c("NA" , "") )
} else {
download.file(testingURL, testingFile)
test <- read.csv(testingFile , na.strings = c("NA" , ""))
}
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
trainingDat <- training[inTrain, ]
testingDat <- training[-inTrain, ]
dim(trainingDat)
dim(testingDat)
dat = read.csv("~/pml-testing.csv")
trainingURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile <- "pm-training.csv"
if (file.exists(trainingFile)){
training <- read.csv(trainingFile , na.strings = c("NA" , "") )
} else {
download.file(trainingURL, trainingFile)
training <- read.csv(trainingFile , na.strings = c("NA" , ""))
}
testingFile <- "pm-testing.csv"
if (file.exists(testingFile)){
test <- read.csv(testingFile , na.strings = c("NA" , "") )
} else {
download.file(testingURL, testingFile)
test <- read.csv(testingFile , na.strings = c("NA" , ""))
}
nearzero <- nearZeroVar(training, saveMetrics = TRUE)
training <- training[, !nearzero$nzv]
varRemove <- sapply(colnames(training),
function(x) if(sum(is.na(training[, x])) > 0.50*nrow(training)){
return(TRUE)
}else{
return(FALSE)}
)
training <- training[, !varRemove]
training <- training[,-(1:6)]
high_cor <- findCorrelation(cor(training [,-53]) , cutoff = 0.9)
names(training)[high_cor]
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
trainingDat <- training[inTrain, ]
testingDat <- training[-inTrain, ]
dim(trainingDat)
dim(testingDat)
trainingControl <- trainControl (method= "cv" ,number = 5 , preProcOptions = "pca" ,  verboseIter = FALSE , allowParallel = TRUE )
rf <- train(classe ~ ., data = trainingDat, method = "rf", trControl= trainingControl)
rf$results$Accuracy
names(getModelInfo())
ct <- train(classe ~ ., data = trainingDat, method = "ctree", trControl= trainingControl)
ct$results$Accuracy
ct <- train(classe ~ ., data = testingDat, method = "ctree", trControl= trainingControl)
ct$results$Accuracy
rf
pred_rf <‐ predict(rf,testingDat)
table(pred_rf,testingDat$classe)
rf1 <- randomForest(classe ~. , data=trainingDat)
pred_rf1 <‐ predict(rf1,testingDat)
table(pred_rf1,testingDat$classe)
pred_rf1
pred_rf1 <‐ predict(rf1,testingDat, type = "class")
confusionMatrix(pred_rf1, testingDat$classe)
bs <- boosting (classe ~. , data=trainingDat)
install.packages("boosting")
library(boosting)
install.packages("gbm")
install.packages("gbm")
library(gb)m
library(gbm)
bs <- boosting (classe ~. , data=trainingDat)
library("adabag")
install.packages("adabag")
library(adabag)
bs <- boosting (classe ~. , data=trainingDat)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(pred_rf)
get(wd)
getwd()
test_pred_rf <‐ predict(rf,test, type = "class")
test_pred_rf
test
dim(test)
test <- test[,!nearzero$nzv]]
test <- test[,!nearzero$nzv]
test <- test[, !varRemove]
test <- test[,-(1:6)]
test_pred_rf <‐ predict(rf,test, type = "class")
dim(test)
dim(trainingDat)
dim(testingDat)
dim(test)
test_pred_rf1 <‐ predict(rf,testingDat, type = "class")
test_pred_rf1 <‐ predict(rf,testingDat)
test_pred_rf <‐ predict(rf,test)
test_pred_rf
test_pred_rf <‐ predict(rf,test)
test_pred_rf
test_pred_rf[1,]
test_pred_rf[,1]
test_pred_rf
test_pred_rf[1]
test_pred_rf[2]
n <- 20
for(i in 1:n){
Answer[i]<-test_pred_rf[i]
Answer[i]
}
for(i in 1:n){
x <- c("Answer"",i )
x
}
)
q
bye
""
for(i in 1:n){
}
for(i in 1:n){
x <- c("Answer",i )
x
}
x
for(i in 1:n){
x <- paste("Answer_",i )
x
}
x
for(i in 1:n){
x <- paste("Answer",i )
x
}
x
for(i in 1:n){
x <- paste("Answer",i )
print(x)
}
for(i in 1:n){
x <- paste("Answer",i, "is" ,test_pred_rf[i]   )
print(x)
}
for(i in 1:n){
x <- paste("Answer",i, "=" ,test_pred_rf[i]   )
print(x)
}
for(i in 1:n){
x <- paste(Answer,i, "=" ,test_pred_rf[i]   )
print(x)
}
confusionMatrix(pred_rf, testingDat$classe)
pred_bs <‐ predict(bs,testingDat, type = "class")
confusionMatrix(pred_bs, testingDat$classe)
pred_bs
confusionMatrix(pred_bs, testingDat$classe)
pred_bs <‐ predict(bs,testingDat)
confusionMatrix(pred_bs, testingDat$classe)
pred_rf <‐ predict(rf,testingDat, type = "class")
confusionMatrix(pred_rf, testingDat$classe)
pred_rf <‐ predict(rf,testingDat, type = "class")
pred_rf <‐ predict(rf,testingDat)
confusionMatrix(pred_rf, testingDat$classe)
confusionMatrix(pred_rf, testingDat$classe)
pred_bs <‐ predict(bs,testingDaty)
pred_bs <‐ predict(bs,testingDat)
confusionMatrix(pred_bs, testingDat$classe)
pred_bs
ppred_rf
pred_rf
pred_bs <‐ predict(bs,testingDat)
pred_bs
bs
rf
rf <- randomForest(classe ~. , data=trainingDat)
pred_rf <‐ predict(rf,testingDat)
confusionMatrix(pred_rf, testingDat$classe)
bs <- boosting(classe ~. , data=trainingDat)
pred_bs <‐ predict(bs,testingDat)
confusionMatrix(pred_bs, testingDat$classe)
bs1 <- train(classe ~ ., data = trainingDat, method = "gbm", trControl= tc)
install.packages("plyr")
library(plyr)
install.packages("plyr")
bs1 <- train(classe ~ ., data = trainingDat, method = "gbm", trControl= tc)
install.packages("plyr")
bs1 <- train(classe ~ ., data = trainingDat, method = "gbm", trControl= tc)
install.packages("plyr")
library(caret)
install.packages("plyr")
bs1 <- train(classe ~ ., data = trainingDat, method = "gbm", trControl= tc)
install.packages("plyr")
install.packages("plyr")
bs1 <- train(classe ~ ., data = trainingDat, method = "gbm", trControl= tc)
bs1 <- train(classe ~ ., data = trainingDat, method = "gbm", trControl= tc)
bs1 <- train(classe ~ ., data = trainingDat, method = "gbm", trControl= tc)
rf1 <- train(classe ~ ., data = trainingDat, method = "rf", trControl= tc)
library(caret)
bs1 <- train(classe ~ ., data = trainingDat, method = "gbm", trControl= tc)
bs1 <- train(classe ~ ., data = trainingDat, method = "gbm", trControl= trainingControl)
library(ddply)
install.packages("ddply")
library(ddply)
library(reshape2)
bs1 <- train(classe ~ ., data = trainingDat, method = "gbm", trControl= trainingControl)
library(ddply)
library(plyr)
library(reshape2)
library(ggplot2 )
library(plyr)
library(reshape2)
install.packages("plyr")
install.packages("plyr")
library(plyr)
library(reshape2)
bs1 <- train(classe ~ ., data = trainingDat, method = "gbm", trControl= trainingControl)
library(caret)
bs1 <- train(classe ~ ., data = trainingDat, method = "gbm", trControl= trainingControl)
pred_bs <‐ predict(bs1,testingDat)
confusionMatrix(pred_bs, testingDat$classe)
nearzero <- nearZeroVar(training, saveMetrics = TRUE)
library(caret)
library(ggplot2)
library(randomForest)
library(rpart)
library(rpart.plot)
library(caTools)
library(kernlab)
library(adabag)
library(plyr)
set.seed (2324)
dat = read.csv("~/pml-testing.csv")
trainingURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainingFile <- "pm-training.csv"
if (file.exists(trainingFile)){
training <- read.csv(trainingFile , na.strings = c("NA" , "") )
} else {
download.file(trainingURL, trainingFile)
training <- read.csv(trainingFile , na.strings = c("NA" , ""))
}
testingFile <- "pm-testing.csv"
if (file.exists(testingFile)){
test <- read.csv(testingFile , na.strings = c("NA" , "") )
} else {
download.file(testingURL, testingFile)
test <- read.csv(testingFile , na.strings = c("NA" , ""))
}
```{r  results="hide"}
dim(training)
head(training)
summary(training)
nearzero <- nearZeroVar(training, saveMetrics = TRUE)
training <- training[, !nearzero$nzv]
test <- test[,!nearzero$nzv]
getwd()
training
nearzero <- nearZeroVar(training, saveMetrics = TRUE)
```
Remove variables with more than 50% missing values
```{r}
varRemove <- sapply(colnames(training),
function(x) if(sum(is.na(training[, x])) > 0.50*nrow(training)){
return(TRUE)
}else{
return(FALSE)}
)
training <- training[, !varRemove]
test <- test[, !varRemove]
```
Remove columns which dont impact the prediction (i.e. name , entry time and date etc.)
```{r}
training <- training[,-(1:6)]
test <- test[,-(1:6)]
```
download.file(trainingURL, trainingFile)
training <- read.csv("pm-training.csv"" , na.strings = c("NA" , ""))
training <- read.csv("pm-training.csv" , na.strings = c("NA" , ""))
nearzero <- nearZeroVar(training, saveMetrics = TRUE)
getwd()
setwd("C:/Users/mmahajna/Documents/Muhammad/Big Data/Course9-DevelopingDataProducts/ShinyApps/CarMpg/CarMPG")
load(".RData")
publish(title = 'mytitle2', 'index.html', host = 'rpubs')
library(slidify)
publish(title = 'mytitle2', 'index.html', host = 'rpubs')
library(RCurl)
publish(title = 'mytitle2', 'index.html', host = 'rpubs')
.libPaths()
find.package("RCurl")
library(bitops,lib.loc='C:/Users/mmahajna/Documents/R/win-library/3.2/')
library(RCurl,lib.loc='C:/Users/mmahajna/Documents/R/win-library/3.2/')
publish(title = 'mytitle2', 'index.html', host = 'rpubs')
publish(title = 'mytitle4', 'index.html', host = 'rpubs')
